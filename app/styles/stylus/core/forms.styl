//
// Forms
// -------------------------------------------------- //


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  padding 0
  margin 0
  border 0
  // Chrome and Firefox set a `min-width min-content` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https//github.com/twbs/bootstrap/issues/12359.
  min-width 0
}

legend {
  position relative
  display block
  width 100%
  padding 24px 0
  margin-bottom 32px
  font-size 1.6rem
  font-weight bold
  font-family font-family-alt
  line-height 1
  text-transform uppercase
  color legend-color
  border 0
  border-bottom 1px solid legend-border-color
}

label {
  display inline-block
  margin-bottom 10px
  font-weight 400
  font-size 1.4rem
  color #fff
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  box-sizing border-box
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display block
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display block
  width 100%
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height auto
}

// Focus for file, radio, and checkbox
input[type="file"]focus,
input[type="radio"]focus,
input[type="checkbox"]focus {
  outline 0
}

// Adjust output element
output {
  display block
  padding-top 10px
  font-size font-size-base
  line-height line-height-base
  color input-color
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display block
  width 100%
  height 50px
  padding 14px 17px
  font-size 1.4rem
  line-height 1.3
  color input-color
  background-color input-bg
  background-image none // Reset unusual Firefox-on-Android default style see https//github.com/necolas/normalize.css/issues/214
  border 2px solid brand-primary
  border-radius input-border-radius
  transition border-color .15s ease-in-out, color .15s ease-in-out, background-color .15s ease-in-out, padding .15s ease-in-out

  // Customize the `focus` state to imitate native WebKit styles.
  &:focus {
    outline 0
  }

  // Placeholder
  placeholder()

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legendfirst-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor cursor-disabled
    background-color input-bg-disabled
    opacity 1 // iOS fix for unreadable disabled content
  }

  // Reset height for `textarea`s
  textarea& {
    height auto
    resize vertical
  }
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https//github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance none
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari.

@media screen and (-webkit-min-device-pixel-ratio 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    line-height input-height-base
  }
  // input[type="date"].input-sm,
  // input[type="time"].input-sm,
  // input[type="datetime-local"].input-sm,
  // input[type="month"].input-sm {
  //   line-height input-height-small
  // }
  // input[type="date"].input-lg,
  // input[type="time"].input-lg,
  // input[type="datetime-local"].input-lg,
  // input[type="month"].input-lg {
  //   line-height input-height-large
  // }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom 8px
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position relative
  display block
  margin-top 10px
  margin-bottom 10px

  label {
    min-height 19px
    line-height 19px
    padding-left 28px
    margin-bottom 0
    font-weight normal
    cursor pointer
    color #fff
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position absolute
  width 19px
  height 19px
  top 0
  left 0
  opacity 0
  z-index 2
}

.checkbox,
.checkbox-inline {
  input[type="checkbox"] + span {
    display inline-block
    position relative
  }
  input[type="checkbox"] + span:before,
  input[type="checkbox"] + span:after {
    content ''
    position absolute
    width 19px
    height 19px
    top 0
    left -28px
    display block
    cursor pointer
    border 2px solid #fff
  }
  input[type="checkbox"] + span:before {
    background url(../img/static/checkbox-mark.svg) no-repeat center/10px 7px
    opacity 0
    transition opacity .15s ease-in-out
  }

  input[type="checkbox"]:checked + span:before {
    opacity 1
  }
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top -5px // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  display inline-block
  padding-left 32px
  margin-bottom 0
  vertical-align middle
  font-weight normal
  cursor pointer
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top 0
  margin-left 10px // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor cursor-disabled
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor cursor-disabled
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor cursor-disabled
    }
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.

// .input-sm,
// .form-group-sm .form-control {
//   .input-size(@input-height-small @padding-small-vertical @padding-small-horizontal @font-size-small @line-height-small @input-border-radius-small)
// }
//
// .input-lg,
// .form-group-lg .form-control {
//   .input-size(@input-height-large @padding-large-vertical @padding-large-horizontal @font-size-large @line-height-large @input-border-radius-large)
// }

// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position relative

  // Ensure icons don't overlap text
  .form-control {
    padding-right input-height-base
  }
}
// Feedback icon (requires .glyphicon classes)
.form-control-feedback {
  position absolute
  top 0
  right 0
  z-index 2 // Ensure icon is above input groups
  display block
  width input-height-base
  height input-height-base
  line-height input-height-base
  text-align center
  pointer-events none
}
.has-feedback {
  .form-control-feedback {
    color input-border
  }
}
// .input-lg + .form-control-feedback,
// .input-group-lg + .form-control-feedback,
// .form-group-lg .form-control + .form-control-feedback {
//   width @input-height-large
//   height @input-height-large
//   line-height @input-height-large
// }
// .input-sm + .form-control-feedback,
// .input-group-sm + .form-control-feedback,
// .form-group-sm .form-control + .form-control-feedback {
//   width @input-height-small
//   height @input-height-small
//   line-height @input-height-small
// }

// Feedback states
// .has-success {
//   .form-control-validation(@state-success-text @state-success-text @state-success-bg)
// }
// .has-warning {
//   .form-control-validation(@state-warning-text @state-warning-text @state-warning-bg)
// }
.has-error {
  position relative
  form-control-validation(state-danger-text, state-danger-border, state-danger-bg)

  .form-control-message {
    display block
  }
}

// Reposition feedback icon if input has visible label above
.has-feedback label {
  & ~ .form-control-feedback {
     top (line-height-computed + 5) // Height of the `label` and its margin
  }
  &.sr-only ~ .form-control-feedback {
     top 0
  }
}

.form-control-message {
  position absolute
  top 27px
  left 19px
  font-size 1.2rem
  line-height 1
  color #000
  display none
  animation formControlMessageAnimation .15s ease-in-out
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  position relative
  display block
  margin 5px -30px 19px
  color text-color
  background-color #fff
  border 1px solid #d9d9d9
  padding 19px 0
  box-shadow 0 1px 6px rgba(0,0,0,.06)
}
